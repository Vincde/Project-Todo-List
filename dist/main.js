(()=>{function t(t,e,n,o){return this.name=t,this.description=e,this.dueDate=n,this.priority=o,this.print=()=>"name:"+this.name+" description: "+this.description+" duedate:"+this.dueDate+"priority: "+this.priority,{print}}function e(){const t=document.querySelectorAll(".todo-board div");for(let e=0;e<t.length;e++)t[e].parentElement.removeChild(t[e])}function n(){const t=document.querySelectorAll(".div-new-inputs input");let e=[0,0,0,0];return e[0]=t[0].value,e[1]=t[1].value,e[2]=t[2].value,e[3]=t[3].value,e}!function(){const o=[];let i;const r=document.querySelector(".dashboard input"),d=document.querySelector(".dashboard button:first-of-type"),u=document.querySelector(".delete"),c=document.querySelector(".add-todo");d.addEventListener("click",(()=>{if(r&&void 0!==r.value&&null!==r.value){let t=r.value;const n=function(t){return this.name=t,this.todo=[],this.getName=()=>this.name,this.pushObj=t=>{this.todo.push(t)},this.getTodo=()=>this.todo,{getName,pushObj,getTodo}}(t);o.push(n),function(t){const e=document.querySelector(".projects"),n=document.createElement("button");n.setAttribute("type","button"),n.textContent=t,e.appendChild(n)}(t),document.querySelector(".projects button:last-of-type").addEventListener("click",(t=>{i=t.currentTarget.textContent,e(),function(t,e){const n=document.querySelector(".todo-board");for(let o=0;o<e.length;o++)if(t===e[o].getName()){let t=e[o].getTodo();for(let e=0;e<t.length;e++){const o=document.createElement("div");o.textContent=t[e].print(),n.appendChild(o)}}}(i,o)}))}})),u.addEventListener("click",(()=>{e();for(let t=0;t<o.length;t++)o[t].getName()===i&&o.slice(t,1);!function(t){const e=document.querySelectorAll(".projects button");for(let n=0;n<e.length;n++)e[n].textContent===t&&e[n].remove()}(i)})),function(){const t=document.querySelector(".dashboard"),e=document.createElement("div");e.setAttribute("class","div-new-inputs");let n=["name","description","due date","priority"];for(let t=0;t<4;t++){const o=document.createElement("input"),i=document.createElement("label");o.setAttribute("type","text"),o.setAttribute("id",`${n[t]}`),i.setAttribute("for",`${n[t]}`),i.textContent=n[t],e.appendChild(i),e.appendChild(o),o.getAttribute("id")===n[1]&&(o.style.width="150px",o.style.height="150px")}t.appendChild(e)}(),c.addEventListener("click",(()=>{let e;for(let r=0;r<o.length;r++)if(e=o[r].getName(),e===i){let e=n(),i=t(e[0],e[1],e[2],e[3]);o[r].pushObj(i)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFHQSxFQUFZLElBQzVFM0MsRUFBYTJCLEdBQUdmLFFBQVFnQyxFQUM1QixDQUNKLEdBS1AsQ0ExREQsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3QtdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGZ1bmN0aW9uIGxvZ2ljKCkge1xuICAgIHRoaXMgd2lsbCBiZSB0aGUgZXhwbGFuYXRpb24gb2YgdGhpcyB3ZWJwYWdlXG4gICAgXG4gICAgMSkgd2VicGFnZSBzdGFydHNcbiAgICAxKil3ZWJwYWdlIGhhcyBhbm90aGVyIGJ1dHRvbiBmb3IgZGVsZXRpbmcgcHJvamVjdChhbmQgaWlmZSBnZXRzIHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudCBjbGlja2VkIGJ1dHRvbilcbiAgICB3aGVuIGRlbGV0aW5nIGJ1dHRvbiBpcyBwcmVzc2VkIGEgZnVuY3Rpb24gc2VhcmNoZXMgZm9yIHRoZSBlbGVtZW50IGFuZCBkZWxldGVzIHRoZSBlbnRpcmUgcHJvamVjdCBhbmQgcmVzZXRzIGFsbCBlbGVtZW50cyBhdCBzY3JlZW4gKGFuZCB0aGUgYnV0dG9uIGluIGRvbSBvYnZpb3VzbHkpXG4gICAgMilvbmx5IHByZXNlbnQgYnV0dG9uIGlzIGlucHV0IGFuZCBuZXdQcm9qZWN0IGJ1dHRvblxuICAgIDMpaWYgaW5wdXQgaXMgZmlsbGVkIHRoZSBidXR0b24gd29ya3MgYW5kIHN0YXJ0cyB0aGUgY3JlYXRpb24gb2YgdGhlIHByb2plY3RcbiAgICA0KXRoZSBidXR0b24gY3JlYXRlcyB0aGUgcHJvamVjdFxuICAgIDUpaXQgY3JlYXRlcyBhIG5ldyBidXR0b24gdGhhdCByZXNldHMgdGhlIHZpZXcgb2YgZWxlbWVudHMgaW4gdGhlIG1haW4gcGFydCBvZiB3ZWJwYWdlXG4gICAgNilvbmx5IHdoZW4gY2xpY2tlZCB0aGUgbmV3bHkgY3JlYXRlZCBidXR0b24gcHJpbnRzIGFsbCBkb20gZWxlbWVudHMgaW50byB0aGUgcGFnZVxuICAgIDcpd2hlbiBhbm90aGVyIGJ1dHRvbiBpcyBzZWxlY3RlZCB0aGUgZG9tIGVsZW1lbnRzIGdldHMgZGVsZXRlZCBhbmQgbmV3IG9uZXMgYXJlIHByaW50ZWRcbiAgICA4KWFub3RoZXIgaWlmZSBnZXRzIHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudGx5IGNsaWNrZWQgYnV0dG9uIGFuZCB1c2VzIGEgYnV0dG9uIHRoYXQgdGFrZXMgYSBuZXcgdG9kbyBhbmQgcHVzaCBpdCBpbnRvIHRoZSBhcnJheSBvZiB0b2Rvcy4gVGhlIHByaW50IGZ1bmN0aW9uIHdpbGwgcHJpbnQgZXZlcnl0aGluZyB3aXRob3V0IHlvdSB0aGlua2luZyBhYm91dCBpdFxuICAgXG59ICovXG5cbihmdW5jdGlvbiB3ZWJQYWdlU3RhcnRzKCl7XG4gICAgY29uc3QgbGlzdFByb2plY3RzID0gW107XG4gICAgbGV0IHdob0lzQ2xpY2tlZDtcblxuICAgIGNvbnN0IGlucHV0U2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGFzaGJvYXJkIGlucHV0Jyk7XG4gICAgY29uc3QgbmV3UHJvamVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXNoYm9hcmQgYnV0dG9uOmZpcnN0LW9mLXR5cGUnKTtcbiAgICBjb25zdCBkZWxQcm9qZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlbGV0ZScpO1xuICAgIGNvbnN0IGFkZFRvZG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRvZG8nKTtcblxuICAgIG5ld1Byb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmKGlucHV0U2VsZWN0b3IgJiYgaW5wdXRTZWxlY3Rvci52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIGlucHV0U2VsZWN0b3IudmFsdWUgIT09IG51bGwpe1xuICAgICAgICBsZXQgaW5wdXQgPSBpbnB1dFNlbGVjdG9yLnZhbHVlO1xuXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBQcm9qZWN0KGlucHV0KTtcbiAgICAgICAgbGlzdFByb2plY3RzLnB1c2gobmV3UHJvamVjdCk7XG4gICAgICAgIFxuICAgICAgICBwb3B1bGF0ZVdpdGhQcm9qZWN0QnV0dG9uKGlucHV0KTtcblxuICAgICAgICBsZXQgcHJvamVjdHNCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RzIGJ1dHRvbjpsYXN0LW9mLXR5cGUnKTtcblxuICAgICAgICBcbiAgICAgICAgICAgIHByb2plY3RzQnV0dG9ucy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKT0+e1xuICAgICAgICAgICAgICAgIHdob0lzQ2xpY2tlZCA9IGUuY3VycmVudFRhcmdldC50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICBkZWxldGVFbGVtZW50c0RvbSgpO1xuICAgICAgICAgICAgICAgIHByaW50VG9kb0VsZW1lbnRzKHdob0lzQ2xpY2tlZCxsaXN0UHJvamVjdHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBcbiAgICBkZWxQcm9qZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT57XG4gICAgICAgIGRlbGV0ZUVsZW1lbnRzRG9tKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsaXN0UHJvamVjdHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYobGlzdFByb2plY3RzW2ldLmdldE5hbWUoKSA9PT0gd2hvSXNDbGlja2VkKXtcbiAgICAgICAgICAgICAgICBsaXN0UHJvamVjdHMuc2xpY2UoaSwxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm9qZWN0RG9tRGVsZXRlKHdob0lzQ2xpY2tlZCk7XG4gICAgfSk7XG5cbiAgICBuZXdUb2RvRGl2RG9tQ3JlYXRpb24oKTtcblxuICAgIGFkZFRvZG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpID0+e1xuXG4gICAgICAgIGxldCBuYW1lO1xuICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgbGlzdFByb2plY3RzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgIG5hbWUgPSBsaXN0UHJvamVjdHNbal0uZ2V0TmFtZSgpO1xuICAgICAgICAgICAgaWYobmFtZSA9PT0gd2hvSXNDbGlja2VkKXtcbiAgICAgICAgICAgICAgICBsZXQgYXJyYXlPZkRhdGEgPSByZXR1cm5JbmZvRnJvbURPTSgpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdUb2RvID0gVG9kbyhhcnJheU9mRGF0YVswXSxhcnJheU9mRGF0YVsxXSxhcnJheU9mRGF0YVsyXSxhcnJheU9mRGF0YVszXSk7XG4gICAgICAgICAgICAgICAgbGlzdFByb2plY3RzW2pdLnB1c2hPYmoobmV3VG9kbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgLy9UaGlzIGZ1bmN0aW9uIGdldHMgZXhlY3V0ZWQgb25seSBhdCBydW50aW1lLCBzbyBpIGNhbm5vdCBwdXQgdGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgYnV0dG9uIHByZXNzZWQuXG59KSgpO1xuXG5cbmZ1bmN0aW9uIFByb2plY3QobmFtZSl7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnRvZG8gPSBbXTtcbiAgICBcbiAgICB0aGlzLmdldE5hbWUgPSAoKSA9PntcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2hPYmogPSAob2JqKSA9PntcbiAgICAgICAgdGhpcy50b2RvLnB1c2gob2JqKTtcbiAgICB9XG5cbiAgICB0aGlzLmdldFRvZG8gPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvZG87XG4gICAgfVxuXG4gICAgcmV0dXJuIHtnZXROYW1lLHB1c2hPYmosZ2V0VG9kb307XG59XG5cbmZ1bmN0aW9uIFRvZG8obmFtZSxkZXNjcmlwdGlvbixkdWVEYXRlLHByaW9yaXR5KXtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcblxuICAgIHRoaXMucHJpbnQgPSAoKSA9PntcbiAgICAgICAgcmV0dXJuICduYW1lOicgKyB0aGlzLm5hbWUgKyAnIGRlc2NyaXB0aW9uOiAnICsgdGhpcy5kZXNjcmlwdGlvbiArICcgZHVlZGF0ZTonICsgdGhpcy5kdWVEYXRlICsgJ3ByaW9yaXR5OiAnICsgdGhpcy5wcmlvcml0eTtcbiAgICB9XG5cbiAgICByZXR1cm57cHJpbnR9O1xufVxuXG5cbmZ1bmN0aW9uIHBvcHVsYXRlV2l0aFByb2plY3RCdXR0b24oaW5wdXQpe1xuICAgIGNvbnN0IHByb2plY3RTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0cycpO1xuXG4gICAgY29uc3QgbmV3QiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIG5ld0Iuc2V0QXR0cmlidXRlKCd0eXBlJywnYnV0dG9uJyk7XG4gICAgbmV3Qi50ZXh0Q29udGVudCA9IGlucHV0O1xuXG4gICAgcHJvamVjdFNlbGVjdG9yLmFwcGVuZENoaWxkKG5ld0IpO1xufVxuXG5mdW5jdGlvbiBwcmludFRvZG9FbGVtZW50cyh3aG9Jc0NsaWNrZWQsbGlzdFByb2plY3RzKXtcbiAgICBjb25zdCBzZWxlY3RCb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWJvYXJkJyk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxpc3RQcm9qZWN0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmKHdob0lzQ2xpY2tlZCA9PT0gbGlzdFByb2plY3RzW2ldLmdldE5hbWUoKSl7XG4gICAgICAgICAgICBsZXQgdG9kbyA9IGxpc3RQcm9qZWN0c1tpXS5nZXRUb2RvKCk7XG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgdG9kby5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgbmV3RGl2LnRleHRDb250ZW50ID0gdG9kb1tqXS5wcmludCgpO1xuICAgICAgICAgICAgICAgIHNlbGVjdEJvYXJkLmFwcGVuZENoaWxkKG5ld0Rpdik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuZnVuY3Rpb24gZGVsZXRlRWxlbWVudHNEb20oKXtcbiAgICBjb25zdCBzZWxlY3REaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG9kby1ib2FyZCBkaXYnKTtcblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWxlY3REaXYubGVuZ3RoOyBpKyspe1xuICAgICAgICBzZWxlY3REaXZbaV0ucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChzZWxlY3REaXZbaV0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvamVjdERvbURlbGV0ZSh3aG9Jc0NsaWNrZWQpe1xuICAgIGNvbnN0IGJ1dHRvblNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0cyBidXR0b24nKTtcblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBidXR0b25TZWxlY3QubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZihidXR0b25TZWxlY3RbaV0udGV4dENvbnRlbnQgPT09IHdob0lzQ2xpY2tlZCl7XG4gICAgICAgICAgICBidXR0b25TZWxlY3RbaV0ucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5ld1RvZG9EaXZEb21DcmVhdGlvbigpe1xuICAgIGNvbnN0IGRhc2hib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXNoYm9hcmQnKTtcbiAgICBjb25zdCBuZXdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBuZXdEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsJ2Rpdi1uZXctaW5wdXRzJyk7XG5cbiAgICBsZXQgaW5wdXROYW1lcyA9IFsnbmFtZScsJ2Rlc2NyaXB0aW9uJywnZHVlIGRhdGUnLCdwcmlvcml0eSddO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCA0OyBpKyspe1xuICAgICAgICBjb25zdCBuZXdJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGNvbnN0IG5ld0xhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcblxuICAgICAgICBuZXdJbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCd0ZXh0Jyk7XG4gICAgICAgIG5ld0lucHV0LnNldEF0dHJpYnV0ZSgnaWQnLGAke2lucHV0TmFtZXNbaV19YCk7XG5cbiAgICAgICAgbmV3TGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLGAke2lucHV0TmFtZXNbaV19YCk7XG4gICAgICAgIG5ld0xhYmVsLnRleHRDb250ZW50ID0gaW5wdXROYW1lc1tpXTtcbiAgICAgICAgbmV3RGl2LmFwcGVuZENoaWxkKG5ld0xhYmVsKTtcbiAgICAgICAgbmV3RGl2LmFwcGVuZENoaWxkKG5ld0lucHV0KTtcblxuICAgICAgICBcbiAgICAgICAgbGV0IGF0dHJpYnV0ZVZhbHVlID0gbmV3SW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICBpZihhdHRyaWJ1dGVWYWx1ZSA9PT0gaW5wdXROYW1lc1sxXSl7XG4gICAgICAgICAgICBuZXdJbnB1dC5zdHlsZS53aWR0aCA9ICcxNTBweCc7XG4gICAgICAgICAgICBuZXdJbnB1dC5zdHlsZS5oZWlnaHQgPSAnMTUwcHgnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGFzaGJvYXJkLmFwcGVuZENoaWxkKG5ld0Rpdik7XG59XG5cbmZ1bmN0aW9uIHJldHVybkluZm9Gcm9tRE9NKCl7XG4gICAgY29uc3QgaW5wdXRCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRpdi1uZXctaW5wdXRzIGlucHV0Jyk7XG4gICAgbGV0IGluZm8gPSBbMCwwLDAsMF07XG4gICAgXG4gICAgICAgICAgICBpbmZvWzBdID0gaW5wdXRCdXR0b25zWzBdLnZhbHVlO1xuICAgICAgICAgICAgaW5mb1sxXSA9IGlucHV0QnV0dG9uc1sxXS52YWx1ZTtcbiAgICAgICAgICAgIGluZm9bMl0gPSBpbnB1dEJ1dHRvbnNbMl0udmFsdWU7XG4gICAgICAgICAgICBpbmZvWzNdID0gaW5wdXRCdXR0b25zWzNdLnZhbHVlO1xuXG4gICAgcmV0dXJuIGluZm87XG4gICAgXG59Il0sIm5hbWVzIjpbIlRvZG8iLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJ0aGlzIiwicHJpbnQiLCJkZWxldGVFbGVtZW50c0RvbSIsInNlbGVjdERpdiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImkiLCJsZW5ndGgiLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJyZXR1cm5JbmZvRnJvbURPTSIsImlucHV0QnV0dG9ucyIsImluZm8iLCJ2YWx1ZSIsImxpc3RQcm9qZWN0cyIsIndob0lzQ2xpY2tlZCIsImlucHV0U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwibmV3UHJvamVjdCIsImRlbFByb2plY3QiLCJhZGRUb2RvIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVuZGVmaW5lZCIsImlucHV0IiwidG9kbyIsImdldE5hbWUiLCJwdXNoT2JqIiwib2JqIiwicHVzaCIsImdldFRvZG8iLCJQcm9qZWN0IiwicHJvamVjdFNlbGVjdG9yIiwibmV3QiIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwicG9wdWxhdGVXaXRoUHJvamVjdEJ1dHRvbiIsImUiLCJjdXJyZW50VGFyZ2V0Iiwic2VsZWN0Qm9hcmQiLCJqIiwibmV3RGl2IiwicHJpbnRUb2RvRWxlbWVudHMiLCJzbGljZSIsImJ1dHRvblNlbGVjdCIsInJlbW92ZSIsInByb2plY3REb21EZWxldGUiLCJkYXNoYm9hcmQiLCJpbnB1dE5hbWVzIiwibmV3SW5wdXQiLCJuZXdMYWJlbCIsImdldEF0dHJpYnV0ZSIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJuZXdUb2RvRGl2RG9tQ3JlYXRpb24iLCJhcnJheU9mRGF0YSIsIm5ld1RvZG8iXSwic291cmNlUm9vdCI6IiJ9