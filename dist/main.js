(()=>{function t(t,e,n,o){return this.todoName=t,this.description=e,this.dueDate=n,this.priority=o,{printIt:()=>`name:  ${t} priority: ${o}`,printItExpanded:()=>`name: ${t} description: ${e} duedate: ${n}priority: ${o}`}}function e(){const t=document.querySelectorAll(".todo-board *");for(let e=0;e<t.length;e++)t[e].textContent="",t[e].remove()}function n(){const t=document.querySelectorAll(".div-new-inputs input");let e=[0,0,0,0];return e[0]=t[0].value,e[1]=t[1].value,e[2]=t[2].value,e[3]=t[3].value,e}function o(t){const e=document.querySelector(".todo-board div:last-of-type");e.addEventListener("click",(n=>{e.textContent===t.printIt()?e.textContent=t.printItExpanded():e.textContent=t.printIt()}))}!function(){const r=[];let d;const i=document.querySelector(".dashboard input"),c=document.querySelector(".dashboard button:first-of-type"),u=document.querySelector(".delete"),l=document.querySelector(".add-todo");c.addEventListener("click",(()=>{let t=i.value;const n=function(t){this.name=t;let e=[];return this.pushObj=t=>{e[e.length]=t},this.getTodo=()=>e,{getName:()=>t,pushObj,getTodo,todo:e}}(t);r.push(n),function(t){const e=document.querySelector(".projects"),n=document.createElement("button");n.setAttribute("type","button"),n.textContent=t,e.appendChild(n)}(t);let c=document.querySelector(".projects button:last-of-type");c.addEventListener("click",(t=>{d=c.textContent,e(),function(t,e){const n=document.querySelector(".todo-board");for(let r=0;r<e.length;r++)if(t===e[r].getName()){let t=e[r].getTodo();for(let e=0;e<t.length;e++){let r=document.createElement("div");r.textContent=t[e].printIt(),n.appendChild(r),o(t[e])}}}(d,r)}))})),u.addEventListener("click",(()=>{e();for(let t=0;t<r.length;t++)r[t].getName()===d&&r.slice(t,1);!function(t){const e=document.querySelectorAll(".projects button");for(let n=0;n<e.length;n++)e[n].textContent===t&&e[n].remove()}(d)})),function(){const t=document.querySelector(".dashboard"),e=document.createElement("div");e.setAttribute("class","div-new-inputs");let n=["name","description","due date","priority"];for(let t=0;t<4;t++){const o=document.createElement("input"),r=document.createElement("label");o.setAttribute("type","text"),o.setAttribute("id",`${n[t]}`),r.setAttribute("for",`${n[t]}`),r.textContent=n[t],e.appendChild(r),e.appendChild(o),o.getAttribute("id")===n[1]&&(o.style.width="150px",o.style.height="150px")}t.appendChild(e)}(),l.addEventListener("click",(()=>{let e,o;for(let i=0;i<r.length;i++)if(o=r[i].getName(),o===d){e=n();const o=t(e[0],e[1],e[2],e[3]);r[i].pushObj(o)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixFQUFjeEMsRUFBYXdCLEdBQUdaLFVBRTNCNEIsSUFBZ0J2QyxFQUFhLENBQzVCc0MsRUFBY2pELElBQ2QsTUFBTW9CLEVBQVVwQyxFQUFLaUUsRUFBWSxHQUFHQSxFQUFZLEdBQUdBLEVBQVksR0FBR0EsRUFBWSxJQUM5RXZDLEVBQWF3QixHQUFHZixRQUFRQyxFQUM1QixDQUNKLEdBS1AsQ0E1REQsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3QtdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGZ1bmN0aW9uIGxvZ2ljKCkge1xuICAgIHRoaXMgd2lsbCBiZSB0aGUgZXhwbGFuYXRpb24gb2YgdGhpcyB3ZWJwYWdlXG4gICAgXG4gICAgMSkgd2VicGFnZSBzdGFydHNcbiAgICAxKil3ZWJwYWdlIGhhcyBhbm90aGVyIGJ1dHRvbiBmb3IgZGVsZXRpbmcgcHJvamVjdChhbmQgaWlmZSBnZXRzIHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudCBjbGlja2VkIGJ1dHRvbilcbiAgICB3aGVuIGRlbGV0aW5nIGJ1dHRvbiBpcyBwcmVzc2VkIGEgZnVuY3Rpb24gc2VhcmNoZXMgZm9yIHRoZSBlbGVtZW50IGFuZCBkZWxldGVzIHRoZSBlbnRpcmUgcHJvamVjdCBhbmQgcmVzZXRzIGFsbCBlbGVtZW50cyBhdCBzY3JlZW4gKGFuZCB0aGUgYnV0dG9uIGluIGRvbSBvYnZpb3VzbHkpXG4gICAgMilvbmx5IHByZXNlbnQgYnV0dG9uIGlzIGlucHV0IGFuZCBuZXdQcm9qZWN0IGJ1dHRvblxuICAgIDMpaWYgaW5wdXQgaXMgZmlsbGVkIHRoZSBidXR0b24gd29ya3MgYW5kIHN0YXJ0cyB0aGUgY3JlYXRpb24gb2YgdGhlIHByb2plY3RcbiAgICA0KXRoZSBidXR0b24gY3JlYXRlcyB0aGUgcHJvamVjdFxuICAgIDUpaXQgY3JlYXRlcyBhIG5ldyBidXR0b24gdGhhdCByZXNldHMgdGhlIHZpZXcgb2YgZWxlbWVudHMgaW4gdGhlIG1haW4gcGFydCBvZiB3ZWJwYWdlXG4gICAgNilvbmx5IHdoZW4gY2xpY2tlZCB0aGUgbmV3bHkgY3JlYXRlZCBidXR0b24gcHJpbnRzIGFsbCBkb20gZWxlbWVudHMgaW50byB0aGUgcGFnZVxuICAgIDcpd2hlbiBhbm90aGVyIGJ1dHRvbiBpcyBzZWxlY3RlZCB0aGUgZG9tIGVsZW1lbnRzIGdldHMgZGVsZXRlZCBhbmQgbmV3IG9uZXMgYXJlIHByaW50ZWRcbiAgICA4KWFub3RoZXIgaWlmZSBnZXRzIHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudGx5IGNsaWNrZWQgYnV0dG9uIGFuZCB1c2VzIGEgYnV0dG9uIHRoYXQgdGFrZXMgYSBuZXcgdG9kbyBhbmQgcHVzaCBpdCBpbnRvIHRoZSBhcnJheSBvZiB0b2Rvcy4gVGhlIHByaW50IGZ1bmN0aW9uIHdpbGwgcHJpbnQgZXZlcnl0aGluZyB3aXRob3V0IHlvdSB0aGlua2luZyBhYm91dCBpdFxuICAgXG59ICovXG5cbihmdW5jdGlvbiB3ZWJQYWdlU3RhcnRzKCl7XG4gICAgY29uc3QgbGlzdFByb2plY3RzID0gW107XG4gICAgbGV0IHdob0lzQ2xpY2tlZDtcblxuICAgIGNvbnN0IGlucHV0U2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGFzaGJvYXJkIGlucHV0Jyk7XG4gICAgY29uc3QgbmV3UHJvamVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXNoYm9hcmQgYnV0dG9uOmZpcnN0LW9mLXR5cGUnKTtcbiAgICBjb25zdCBkZWxQcm9qZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlbGV0ZScpO1xuICAgIGNvbnN0IGFkZFRvZG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRvZG8nKTtcblxuICAgIG5ld1Byb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIFxuICAgICAgICBsZXQgaW5wdXQgPSBpbnB1dFNlbGVjdG9yLnZhbHVlO1xuXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBQcm9qZWN0KGlucHV0KTtcbiAgICAgICAgbGlzdFByb2plY3RzLnB1c2gobmV3UHJvamVjdCk7XG4gICAgICAgIFxuICAgICAgICBwb3B1bGF0ZVdpdGhQcm9qZWN0QnV0dG9uKGlucHV0KTtcblxuICAgICAgICBsZXQgcHJvamVjdHNCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RzIGJ1dHRvbjpsYXN0LW9mLXR5cGUnKTtcblxuICAgICAgICBcbiAgICAgICAgcHJvamVjdHNCdXR0b25zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpPT57XG4gICAgICAgICAgICB3aG9Jc0NsaWNrZWQgPSBwcm9qZWN0c0J1dHRvbnMudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICBkZWxldGVFbGVtZW50c0RvbSgpO1xuICAgICAgICAgICAgcHJpbnRUb2RvRWxlbWVudHMod2hvSXNDbGlja2VkLGxpc3RQcm9qZWN0cyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9KTtcblxuICAgIFxuICAgIGRlbFByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PntcbiAgICAgICAgZGVsZXRlRWxlbWVudHNEb20oKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxpc3RQcm9qZWN0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBpZihsaXN0UHJvamVjdHNbaV0uZ2V0TmFtZSgpID09PSB3aG9Jc0NsaWNrZWQpe1xuICAgICAgICAgICAgICAgIGxpc3RQcm9qZWN0cy5zbGljZShpLDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb2plY3REb21EZWxldGUod2hvSXNDbGlja2VkKTtcbiAgICB9KTtcblxuICAgIG5ld1RvZG9EaXZEb21DcmVhdGlvbigpO1xuXG4gICAgYWRkVG9kby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCkgPT57XG4gICAgICAgIGxldCBhcnJheU9mRGF0YTtcbiAgICAgICAgbGV0IHByb2plY3ROYW1lO1xuICAgICAgICBcblxuICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgbGlzdFByb2plY3RzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgIHByb2plY3ROYW1lID0gbGlzdFByb2plY3RzW2pdLmdldE5hbWUoKTtcblxuICAgICAgICAgICAgaWYocHJvamVjdE5hbWUgPT09IHdob0lzQ2xpY2tlZCl7XG4gICAgICAgICAgICAgICAgYXJyYXlPZkRhdGEgPSByZXR1cm5JbmZvRnJvbURPTSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RvZG8gPSBUb2RvKGFycmF5T2ZEYXRhWzBdLGFycmF5T2ZEYXRhWzFdLGFycmF5T2ZEYXRhWzJdLGFycmF5T2ZEYXRhWzNdKTtcbiAgICAgICAgICAgICAgICBsaXN0UHJvamVjdHNbal0ucHVzaE9iaihuZXdUb2RvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICAvL1RoaXMgZnVuY3Rpb24gZ2V0cyBleGVjdXRlZCBvbmx5IGF0IHJ1bnRpbWUsIHNvIGkgY2Fubm90IHB1dCB0aGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBidXR0b24gcHJlc3NlZC5cbn0pKCk7XG5cblxuZnVuY3Rpb24gUHJvamVjdChuYW1lKXtcbiAgICB0aGlzLm5hbWUgPSBuYW1lOyAgLy9JdCBpcyBwcm9iYWJsZSB0aGF0IHNvbWUgcHJvYmxlbXMgbWlnaHQgYmUgY2F1c2VkIGJ5IHRoZSB0aGlzLm5hbWUgLi4uIElmIHRydWUganVzdCBkZWxldGUgdGhlIHRoaXNcbiAgICBsZXQgdG9kbyA9IFtdO1xuICAgIFxuICAgIGNvbnN0IGdldE5hbWUgPSAoKSA9PntcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoT2JqID0gKG5ld1RvZG8pID0+e1xuICAgICAgICB0b2RvW3RvZG8ubGVuZ3RoXSA9IG5ld1RvZG87XG4gICAgfVxuXG4gICAgdGhpcy5nZXRUb2RvID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdG9kbztcbiAgICB9XG5cbiAgICByZXR1cm4ge2dldE5hbWUscHVzaE9iaixnZXRUb2RvLHRvZG99O1xufVxuXG5mdW5jdGlvbiBUb2RvKHRvZG9OYW1lLGRlc2NyaXB0aW9uLGR1ZURhdGUscHJpb3JpdHkpe1xuICAgIHRoaXMudG9kb05hbWUgPSB0b2RvTmFtZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG5cbiAgICBjb25zdCBwcmludEl0ID0gKCkgPT57ICAvL2hhZCB0byBjaGFuZ2UgbmFtZSBvZiB0b2RvXG4gICAgICAgIHJldHVybiBgbmFtZTogICR7dG9kb05hbWV9IHByaW9yaXR5OiAke3ByaW9yaXR5fWA7XG4gICAgfVxuXG4gICAgY29uc3QgcHJpbnRJdEV4cGFuZGVkID0gKCkgPT57XG4gICAgICAgIHJldHVybiBgbmFtZTogJHt0b2RvTmFtZX0gZGVzY3JpcHRpb246ICR7ZGVzY3JpcHRpb259IGR1ZWRhdGU6ICR7ZHVlRGF0ZX1wcmlvcml0eTogJHtwcmlvcml0eX1gO1xuICAgIH1cblxuICAgIHJldHVybntwcmludEl0LHByaW50SXRFeHBhbmRlZH07XG59XG5cblxuZnVuY3Rpb24gcG9wdWxhdGVXaXRoUHJvamVjdEJ1dHRvbihpbnB1dCl7XG4gICAgY29uc3QgcHJvamVjdFNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RzJyk7XG5cbiAgICBjb25zdCBuZXdCID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgbmV3Qi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCdidXR0b24nKTtcbiAgICBuZXdCLnRleHRDb250ZW50ID0gaW5wdXQ7XG5cbiAgICBwcm9qZWN0U2VsZWN0b3IuYXBwZW5kQ2hpbGQobmV3Qik7XG59XG5cbmZ1bmN0aW9uIHByaW50VG9kb0VsZW1lbnRzKHdob0lzQ2xpY2tlZCxsaXN0UHJvamVjdHMpe1xuICAgIGNvbnN0IHNlbGVjdEJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZG8tYm9hcmQnKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGlzdFByb2plY3RzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYod2hvSXNDbGlja2VkID09PSBsaXN0UHJvamVjdHNbaV0uZ2V0TmFtZSgpKXtcbiAgICAgICAgICAgIGxldCB2YXJUb2RvID0gbGlzdFByb2plY3RzW2ldLmdldFRvZG8oKTtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCB2YXJUb2RvLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICBsZXQgbmV3RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgbmV3RGl2LnRleHRDb250ZW50ID0gKHZhclRvZG9bal0ucHJpbnRJdCgpKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RCb2FyZC5hcHBlbmRDaGlsZChuZXdEaXYpO1xuICAgICAgICAgICAgICAgIG1ha2VEaXZFeHBhbmQodmFyVG9kb1tqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuZnVuY3Rpb24gZGVsZXRlRWxlbWVudHNEb20oKXtcbiAgICBjb25zdCBzZWxlY3REaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG9kby1ib2FyZCAqJyk7XG5cbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VsZWN0RGl2Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgc2VsZWN0RGl2W2ldLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgIHNlbGVjdERpdltpXS5yZW1vdmUoKTtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gcHJvamVjdERvbURlbGV0ZSh3aG9Jc0NsaWNrZWQpe1xuICAgIGNvbnN0IGJ1dHRvblNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0cyBidXR0b24nKTtcblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBidXR0b25TZWxlY3QubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZihidXR0b25TZWxlY3RbaV0udGV4dENvbnRlbnQgPT09IHdob0lzQ2xpY2tlZCl7XG4gICAgICAgICAgICBidXR0b25TZWxlY3RbaV0ucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5ld1RvZG9EaXZEb21DcmVhdGlvbigpe1xuICAgIGNvbnN0IGRhc2hib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXNoYm9hcmQnKTtcbiAgICBjb25zdCBuZXdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBuZXdEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsJ2Rpdi1uZXctaW5wdXRzJyk7XG5cbiAgICBsZXQgaW5wdXROYW1lcyA9IFsnbmFtZScsJ2Rlc2NyaXB0aW9uJywnZHVlIGRhdGUnLCdwcmlvcml0eSddO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCA0OyBpKyspe1xuICAgICAgICBjb25zdCBuZXdJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGNvbnN0IG5ld0xhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcblxuICAgICAgICBuZXdJbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCd0ZXh0Jyk7XG4gICAgICAgIG5ld0lucHV0LnNldEF0dHJpYnV0ZSgnaWQnLGAke2lucHV0TmFtZXNbaV19YCk7XG5cbiAgICAgICAgbmV3TGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLGAke2lucHV0TmFtZXNbaV19YCk7XG4gICAgICAgIG5ld0xhYmVsLnRleHRDb250ZW50ID0gaW5wdXROYW1lc1tpXTtcbiAgICAgICAgbmV3RGl2LmFwcGVuZENoaWxkKG5ld0xhYmVsKTtcbiAgICAgICAgbmV3RGl2LmFwcGVuZENoaWxkKG5ld0lucHV0KTtcblxuICAgICAgICBcbiAgICAgICAgbGV0IGF0dHJpYnV0ZVZhbHVlID0gbmV3SW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICBpZihhdHRyaWJ1dGVWYWx1ZSA9PT0gaW5wdXROYW1lc1sxXSl7XG4gICAgICAgICAgICBuZXdJbnB1dC5zdHlsZS53aWR0aCA9ICcxNTBweCc7XG4gICAgICAgICAgICBuZXdJbnB1dC5zdHlsZS5oZWlnaHQgPSAnMTUwcHgnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGFzaGJvYXJkLmFwcGVuZENoaWxkKG5ld0Rpdik7XG59XG5cbmZ1bmN0aW9uIHJldHVybkluZm9Gcm9tRE9NKCl7XG4gICAgY29uc3QgaW5wdXRCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRpdi1uZXctaW5wdXRzIGlucHV0Jyk7XG4gICAgbGV0IGluZm8gPSBbMCwwLDAsMF07XG4gICAgXG4gICAgICAgICAgICBpbmZvWzBdID0gaW5wdXRCdXR0b25zWzBdLnZhbHVlO1xuICAgICAgICAgICAgaW5mb1sxXSA9IGlucHV0QnV0dG9uc1sxXS52YWx1ZTtcbiAgICAgICAgICAgIGluZm9bMl0gPSBpbnB1dEJ1dHRvbnNbMl0udmFsdWU7XG4gICAgICAgICAgICBpbmZvWzNdID0gaW5wdXRCdXR0b25zWzNdLnZhbHVlO1xuXG4gICAgcmV0dXJuIGluZm87XG4gICAgXG59XG5cbmZ1bmN0aW9uIG1ha2VEaXZFeHBhbmQodG9kb0VsZW1lbnQpe1xuICAgIGNvbnN0IGRpdlRvRXhwYW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZG8tYm9hcmQgZGl2Omxhc3Qtb2YtdHlwZScpO1xuXG4gICAgZGl2VG9FeHBhbmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSk9PntcbiAgICAgICAgXG4gICAgICAgIGlmKGRpdlRvRXhwYW5kLnRleHRDb250ZW50ID09PSB0b2RvRWxlbWVudC5wcmludEl0KCkpe1xuICAgICAgICBkaXZUb0V4cGFuZC50ZXh0Q29udGVudCA9IHRvZG9FbGVtZW50LnByaW50SXRFeHBhbmRlZCgpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGRpdlRvRXhwYW5kLnRleHRDb250ZW50ID0gdG9kb0VsZW1lbnQucHJpbnRJdCgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBcbn0iXSwibmFtZXMiOlsiVG9kbyIsInRvZG9OYW1lIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJ0aGlzIiwicHJpbnRJdCIsInByaW50SXRFeHBhbmRlZCIsImRlbGV0ZUVsZW1lbnRzRG9tIiwic2VsZWN0RGl2IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImxlbmd0aCIsInRleHRDb250ZW50IiwicmVtb3ZlIiwicmV0dXJuSW5mb0Zyb21ET00iLCJpbnB1dEJ1dHRvbnMiLCJpbmZvIiwidmFsdWUiLCJtYWtlRGl2RXhwYW5kIiwidG9kb0VsZW1lbnQiLCJkaXZUb0V4cGFuZCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImxpc3RQcm9qZWN0cyIsIndob0lzQ2xpY2tlZCIsImlucHV0U2VsZWN0b3IiLCJuZXdQcm9qZWN0IiwiZGVsUHJvamVjdCIsImFkZFRvZG8iLCJpbnB1dCIsIm5hbWUiLCJ0b2RvIiwicHVzaE9iaiIsIm5ld1RvZG8iLCJnZXRUb2RvIiwiZ2V0TmFtZSIsIlByb2plY3QiLCJwdXNoIiwicHJvamVjdFNlbGVjdG9yIiwibmV3QiIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsInBvcHVsYXRlV2l0aFByb2plY3RCdXR0b24iLCJwcm9qZWN0c0J1dHRvbnMiLCJzZWxlY3RCb2FyZCIsInZhclRvZG8iLCJqIiwibmV3RGl2IiwicHJpbnRUb2RvRWxlbWVudHMiLCJzbGljZSIsImJ1dHRvblNlbGVjdCIsInByb2plY3REb21EZWxldGUiLCJkYXNoYm9hcmQiLCJpbnB1dE5hbWVzIiwibmV3SW5wdXQiLCJuZXdMYWJlbCIsImdldEF0dHJpYnV0ZSIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJuZXdUb2RvRGl2RG9tQ3JlYXRpb24iLCJhcnJheU9mRGF0YSIsInByb2plY3ROYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==