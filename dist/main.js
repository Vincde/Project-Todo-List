(()=>{function t(t,e,o,n){return this.todoName=t,this.description=e,this.dueDate=o,this.priority=n,this.print=()=>"name:"+this.todoName+" description: "+this.description+" duedate:"+this.dueDate+"priority: "+this.priority,{print}}function e(){const t=document.querySelectorAll(".todo-board div");for(let e=0;e<t.length;e++)t[e].parentElement.removeChild(t[e])}function o(){const t=document.querySelectorAll(".div-new-inputs input");let e=[0,0,0,0];return e[0]=t[0].value,e[1]=t[1].value,e[2]=t[2].value,e[3]=t[3].value,e}!function(){const n=[];let i;const r=document.querySelector(".dashboard input"),d=document.querySelector(".dashboard button:first-of-type"),u=document.querySelector(".delete"),c=document.querySelector(".add-todo");d.addEventListener("click",(()=>{let t=r.value;const o=function(t){return this.name=t,this.todo=[],this.getName=()=>this.name,this.pushObj=t=>{this.todo.push(t)},this.getTodo=()=>this.todo,{getName,pushObj,getTodo}}(t);n.push(o),function(t){const e=document.querySelector(".projects"),o=document.createElement("button");o.setAttribute("type","button"),o.textContent=t,e.appendChild(o)}(t);let d=document.querySelector(".projects button:last-of-type");d.addEventListener("click",(t=>{i=d.textContent,e(),function(t,e){const o=document.querySelector(".todo-board");for(let n=0;n<e.length;n++)if(t===e[n].getName()){let t=e[n].getTodo();for(let e=0;e<t.length;e++){let n=document.createElement("div");n.textContent=t[e].print(),o.appendChild(n)}}}(i,n)}))})),u.addEventListener("click",(()=>{e();for(let t=0;t<n.length;t++)n[t].getName()===i&&n.slice(t,1);!function(t){const e=document.querySelectorAll(".projects button");for(let o=0;o<e.length;o++)e[o].textContent===t&&e[o].remove()}(i)})),function(){const t=document.querySelector(".dashboard"),e=document.createElement("div");e.setAttribute("class","div-new-inputs");let o=["name","description","due date","priority"];for(let t=0;t<4;t++){const n=document.createElement("input"),i=document.createElement("label");n.setAttribute("type","text"),n.setAttribute("id",`${o[t]}`),i.setAttribute("for",`${o[t]}`),i.textContent=o[t],e.appendChild(i),e.appendChild(n),n.getAttribute("id")===o[1]&&(n.style.width="150px",n.style.height="150px")}t.appendChild(e)}(),c.addEventListener("click",(()=>{let e;for(let r=0;r<n.length;r++)if(e=n[r].getName(),e===i){let e=o(),i=t(e[0],e[1],e[2],e[3]);n[r].pushObj(i)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,