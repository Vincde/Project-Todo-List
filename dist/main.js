(()=>{function t(t,e,n,o){return this.todoName=t,this.description=e,this.dueDate=n,this.priority=o,{printIt:()=>`name:  ${t} priority: ${o}`,printItExpanded:()=>`name: ${t} description: ${e} duedate: ${n}priority: ${o}`,getNameOfTodo:()=>t}}function e(){const t=document.querySelectorAll(".todo-board *");for(let e=0;e<t.length;e++)t[e].textContent="",t[e].remove()}function n(){const t=document.querySelectorAll(".div-new-inputs input");let e=[0,0,0,0];return e[0]=t[0].value,e[1]=t[1].value,e[2]=t[2].value,e[3]=t[3].value,e}function o(t){const e=document.querySelector(".todo-board div:last-of-type > div:last-of-type"),n=document.querySelector(".todo-board div:last-of-type button");document.querySelector(".todo-board div:last-of-type").style.display="flex",n.style.visibility="hidden",e.addEventListener("click",(o=>{e.textContent===t.printIt()?(e.textContent=t.printItExpanded(),n.style.visibility="visible"):(e.textContent=t.printIt(),n.style.visibility="hidden")}))}!function(){const d=[];let i;const r=document.querySelector(".dashboard input"),l=document.querySelector(".dashboard button:first-of-type"),c=document.querySelector(".delete"),u=document.querySelector(".add-todo");l.addEventListener("click",(()=>{let t=r.value;const n=function(t){this.name=t;let e=[];return this.pushObj=t=>{e[e.length]=t},this.getTodo=()=>e,{getName:()=>t,pushObj,getTodo,todo:e}}(t);d.push(n),function(t){const e=document.querySelector(".projects"),n=document.createElement("button");n.setAttribute("type","button"),n.textContent=t,e.appendChild(n)}(t);let l=document.querySelector(".projects button:last-of-type");l.addEventListener("click",(t=>{i=l.textContent,e(),function(t,e){const n=document.querySelector(".todo-board");for(let d=0;d<e.length;d++)if(t===e[d].getName()){let t=e[d].getTodo();for(let e=0;e<t.length;e++){let d=document.createElement("div"),i=document.createElement("div");i.textContent=t[e].printIt(),n.appendChild(d),d.appendChild(i);const r=document.createElement("button");r.setAttribute("type","button"),r.textContent="Delete This Todo",r.setAttribute("class","delButton"),d.appendChild(r),o(t[e])}}}(i,d)}))})),c.addEventListener("click",(()=>{e();for(let t=0;t<d.length;t++)d[t].getName()===i&&d.slice(t,1);!function(t){const e=document.querySelectorAll(".projects button");for(let n=0;n<e.length;n++)e[n].textContent===t&&e[n].remove()}(i)})),function(){const t=document.querySelector(".dashboard"),e=document.createElement("div");e.setAttribute("class","div-new-inputs");let n=["name","description","due date","priority"];for(let t=0;t<4;t++){const o=document.createElement("input"),d=document.createElement("label");o.setAttribute("type","text"),o.setAttribute("id",`${n[t]}`),d.setAttribute("for",`${n[t]}`),d.textContent=n[t],e.appendChild(d),e.appendChild(o),o.getAttribute("id")===n[1]&&(o.style.width="150px",o.style.height="150px")}t.appendChild(e)}(),u.addEventListener("click",(()=>{let e,o;for(let r=0;r<d.length;r++)if(o=d[r].getName(),o===i){e=n();const o=t(e[0],e[1],e[2],e[3]);d[r].pushObj(o)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWEsS0FBSyxHQUFHZ0IsRUFBV3BELE1BRXpDc0QsRUFBU2xCLGFBQWEsTUFBTSxHQUFHZ0IsRUFBV3BELE1BQzFDc0QsRUFBU3BELFlBQWNrRCxFQUFXcEQsR0FDbENtRCxFQUFPZCxZQUFZaUIsR0FDbkJILEVBQU9kLFlBQVlnQixHQUdFQSxFQUFTRSxhQUFhLFFBQ3JCSCxFQUFXLEtBQzdCQyxFQUFTeEMsTUFBTTJDLE1BQVEsUUFDdkJILEVBQVN4QyxNQUFNNEMsT0FBUyxRQUVoQyxDQUVBUCxFQUFVYixZQUFZYyxFQUMxQixDQXBKSU8sR0FFQW5DLEVBQVFQLGlCQUFpQixTQUFRLEtBQzdCLElBQUkyQyxFQUNBQyxFQUdKLElBQUksSUFBSWxCLEVBQUksRUFBR0EsRUFBSXhCLEVBQWFqQixPQUFReUMsSUFHcEMsR0FGQWtCLEVBQWMxQyxFQUFhd0IsR0FBR1osVUFFM0I4QixJQUFnQnpDLEVBQWEsQ0FDNUJ3QyxFQUFjdkQsSUFDZCxNQUFNd0IsRUFBVXpDLEVBQUt3RSxFQUFZLEdBQUdBLEVBQVksR0FBR0EsRUFBWSxHQUFHQSxFQUFZLElBQzlFekMsRUFBYXdCLEdBQUdmLFFBQVFDLEVBQzVCLENBQ0osR0FLUCxDQTVERCxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZnVuY3Rpb24gbG9naWMoKSB7XG4gICAgdGhpcyB3aWxsIGJlIHRoZSBleHBsYW5hdGlvbiBvZiB0aGlzIHdlYnBhZ2VcbiAgICBcbiAgICAxKSB3ZWJwYWdlIHN0YXJ0c1xuICAgIDEqKXdlYnBhZ2UgaGFzIGFub3RoZXIgYnV0dG9uIGZvciBkZWxldGluZyBwcm9qZWN0KGFuZCBpaWZlIGdldHMgdGhlIHZhbHVlIG9mIHRoZSBjdXJyZW50IGNsaWNrZWQgYnV0dG9uKVxuICAgIHdoZW4gZGVsZXRpbmcgYnV0dG9uIGlzIHByZXNzZWQgYSBmdW5jdGlvbiBzZWFyY2hlcyBmb3IgdGhlIGVsZW1lbnQgYW5kIGRlbGV0ZXMgdGhlIGVudGlyZSBwcm9qZWN0IGFuZCByZXNldHMgYWxsIGVsZW1lbnRzIGF0IHNjcmVlbiAoYW5kIHRoZSBidXR0b24gaW4gZG9tIG9idmlvdXNseSlcbiAgICAyKW9ubHkgcHJlc2VudCBidXR0b24gaXMgaW5wdXQgYW5kIG5ld1Byb2plY3QgYnV0dG9uXG4gICAgMylpZiBpbnB1dCBpcyBmaWxsZWQgdGhlIGJ1dHRvbiB3b3JrcyBhbmQgc3RhcnRzIHRoZSBjcmVhdGlvbiBvZiB0aGUgcHJvamVjdFxuICAgIDQpdGhlIGJ1dHRvbiBjcmVhdGVzIHRoZSBwcm9qZWN0XG4gICAgNSlpdCBjcmVhdGVzIGEgbmV3IGJ1dHRvbiB0aGF0IHJlc2V0cyB0aGUgdmlldyBvZiBlbGVtZW50cyBpbiB0aGUgbWFpbiBwYXJ0IG9mIHdlYnBhZ2VcbiAgICA2KW9ubHkgd2hlbiBjbGlja2VkIHRoZSBuZXdseSBjcmVhdGVkIGJ1dHRvbiBwcmludHMgYWxsIGRvbSBlbGVtZW50cyBpbnRvIHRoZSBwYWdlXG4gICAgNyl3aGVuIGFub3RoZXIgYnV0dG9uIGlzIHNlbGVjdGVkIHRoZSBkb20gZWxlbWVudHMgZ2V0cyBkZWxldGVkIGFuZCBuZXcgb25lcyBhcmUgcHJpbnRlZFxuICAgIDgpYW5vdGhlciBpaWZlIGdldHMgdGhlIHZhbHVlIG9mIHRoZSBjdXJyZW50bHkgY2xpY2tlZCBidXR0b24gYW5kIHVzZXMgYSBidXR0b24gdGhhdCB0YWtlcyBhIG5ldyB0b2RvIGFuZCBwdXNoIGl0IGludG8gdGhlIGFycmF5IG9mIHRvZG9zLiBUaGUgcHJpbnQgZnVuY3Rpb24gd2lsbCBwcmludCBldmVyeXRoaW5nIHdpdGhvdXQgeW91IHRoaW5raW5nIGFib3V0IGl0XG4gICBcbn0gKi9cblxuKGZ1bmN0aW9uIHdlYlBhZ2VTdGFydHMoKXtcbiAgICBjb25zdCBsaXN0UHJvamVjdHMgPSBbXTtcbiAgICBsZXQgd2hvSXNDbGlja2VkO1xuXG4gICAgY29uc3QgaW5wdXRTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXNoYm9hcmQgaW5wdXQnKTtcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhc2hib2FyZCBidXR0b246Zmlyc3Qtb2YtdHlwZScpO1xuICAgIGNvbnN0IGRlbFByb2plY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGVsZXRlJyk7XG4gICAgY29uc3QgYWRkVG9kbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdG9kbycpO1xuXG4gICAgbmV3UHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgXG4gICAgICAgIGxldCBpbnB1dCA9IGlucHV0U2VsZWN0b3IudmFsdWU7XG5cbiAgICAgICAgY29uc3QgbmV3UHJvamVjdCA9IFByb2plY3QoaW5wdXQpO1xuICAgICAgICBsaXN0UHJvamVjdHMucHVzaChuZXdQcm9qZWN0KTtcbiAgICAgICAgXG4gICAgICAgIHBvcHVsYXRlV2l0aFByb2plY3RCdXR0b24oaW5wdXQpO1xuXG4gICAgICAgIGxldCBwcm9qZWN0c0J1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdHMgYnV0dG9uOmxhc3Qtb2YtdHlwZScpO1xuXG4gICAgICAgIFxuICAgICAgICBwcm9qZWN0c0J1dHRvbnMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSk9PntcbiAgICAgICAgICAgIHdob0lzQ2xpY2tlZCA9IHByb2plY3RzQnV0dG9ucy50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIGRlbGV0ZUVsZW1lbnRzRG9tKCk7XG4gICAgICAgICAgICBwcmludFRvZG9FbGVtZW50cyh3aG9Jc0NsaWNrZWQsbGlzdFByb2plY3RzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgIH0pO1xuXG4gICAgXG4gICAgZGVsUHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+e1xuICAgICAgICBkZWxldGVFbGVtZW50c0RvbSgpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGlzdFByb2plY3RzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGlmKGxpc3RQcm9qZWN0c1tpXS5nZXROYW1lKCkgPT09IHdob0lzQ2xpY2tlZCl7XG4gICAgICAgICAgICAgICAgbGlzdFByb2plY3RzLnNsaWNlKGksMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvamVjdERvbURlbGV0ZSh3aG9Jc0NsaWNrZWQpO1xuICAgIH0pO1xuXG4gICAgbmV3VG9kb0RpdkRvbUNyZWF0aW9uKCk7XG5cbiAgICBhZGRUb2RvLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoKSA9PntcbiAgICAgICAgbGV0IGFycmF5T2ZEYXRhO1xuICAgICAgICBsZXQgcHJvamVjdE5hbWU7XG4gICAgICAgIFxuXG4gICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBsaXN0UHJvamVjdHMubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgcHJvamVjdE5hbWUgPSBsaXN0UHJvamVjdHNbal0uZ2V0TmFtZSgpO1xuXG4gICAgICAgICAgICBpZihwcm9qZWN0TmFtZSA9PT0gd2hvSXNDbGlja2VkKXtcbiAgICAgICAgICAgICAgICBhcnJheU9mRGF0YSA9IHJldHVybkluZm9Gcm9tRE9NKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VG9kbyA9IFRvZG8oYXJyYXlPZkRhdGFbMF0sYXJyYXlPZkRhdGFbMV0sYXJyYXlPZkRhdGFbMl0sYXJyYXlPZkRhdGFbM10pO1xuICAgICAgICAgICAgICAgIGxpc3RQcm9qZWN0c1tqXS5wdXNoT2JqKG5ld1RvZG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cblxuICAgIC8vVGhpcyBmdW5jdGlvbiBnZXRzIGV4ZWN1dGVkIG9ubHkgYXQgcnVudGltZSwgc28gaSBjYW5ub3QgcHV0IHRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGJ1dHRvbiBwcmVzc2VkLlxufSkoKTtcblxuXG5mdW5jdGlvbiBQcm9qZWN0KG5hbWUpe1xuICAgIHRoaXMubmFtZSA9IG5hbWU7ICAvL0l0IGlzIHByb2JhYmxlIHRoYXQgc29tZSBwcm9ibGVtcyBtaWdodCBiZSBjYXVzZWQgYnkgdGhlIHRoaXMubmFtZSAuLi4gSWYgdHJ1ZSBqdXN0IGRlbGV0ZSB0aGUgdGhpc1xuICAgIGxldCB0b2RvID0gW107XG4gICAgXG4gICAgY29uc3QgZ2V0TmFtZSA9ICgpID0+e1xuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2hPYmogPSAobmV3VG9kbykgPT57XG4gICAgICAgIHRvZG9bdG9kby5sZW5ndGhdID0gbmV3VG9kbztcbiAgICB9XG5cbiAgICB0aGlzLmdldFRvZG8gPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0b2RvO1xuICAgIH1cblxuICAgIHJldHVybiB7Z2V0TmFtZSxwdXNoT2JqLGdldFRvZG8sdG9kb307XG59XG5cbmZ1bmN0aW9uIFRvZG8odG9kb05hbWUsZGVzY3JpcHRpb24sZHVlRGF0ZSxwcmlvcml0eSl7XG4gICAgdGhpcy50b2RvTmFtZSA9IHRvZG9OYW1lO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcblxuICAgIGNvbnN0IHByaW50SXQgPSAoKSA9PnsgIC8vaGFkIHRvIGNoYW5nZSBuYW1lIG9mIHRvZG9cbiAgICAgICAgcmV0dXJuIGBuYW1lOiAgJHt0b2RvTmFtZX0gcHJpb3JpdHk6ICR7cHJpb3JpdHl9YDtcbiAgICB9XG5cbiAgICBjb25zdCBwcmludEl0RXhwYW5kZWQgPSAoKSA9PntcbiAgICAgICAgcmV0dXJuIGBuYW1lOiAke3RvZG9OYW1lfSBkZXNjcmlwdGlvbjogJHtkZXNjcmlwdGlvbn0gZHVlZGF0ZTogJHtkdWVEYXRlfXByaW9yaXR5OiAke3ByaW9yaXR5fWA7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0TmFtZU9mVG9kbyA9ICgpID0+e1xuICAgICAgICByZXR1cm4gdG9kb05hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJue3ByaW50SXQscHJpbnRJdEV4cGFuZGVkLGdldE5hbWVPZlRvZG99O1xufVxuXG5cbmZ1bmN0aW9uIHBvcHVsYXRlV2l0aFByb2plY3RCdXR0b24oaW5wdXQpe1xuICAgIGNvbnN0IHByb2plY3RTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0cycpO1xuXG4gICAgY29uc3QgbmV3QiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIG5ld0Iuc2V0QXR0cmlidXRlKCd0eXBlJywnYnV0dG9uJyk7XG4gICAgbmV3Qi50ZXh0Q29udGVudCA9IGlucHV0O1xuXG4gICAgcHJvamVjdFNlbGVjdG9yLmFwcGVuZENoaWxkKG5ld0IpO1xufVxuXG5mdW5jdGlvbiBwcmludFRvZG9FbGVtZW50cyh3aG9Jc0NsaWNrZWQsbGlzdFByb2plY3RzKXtcbiAgICBjb25zdCBzZWxlY3RCb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWJvYXJkJyk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxpc3RQcm9qZWN0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmKHdob0lzQ2xpY2tlZCA9PT0gbGlzdFByb2plY3RzW2ldLmdldE5hbWUoKSl7XG4gICAgICAgICAgICBsZXQgdmFyVG9kbyA9IGxpc3RQcm9qZWN0c1tpXS5nZXRUb2RvKCk7XG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgdmFyVG9kby5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgbGV0IG5ld0RpdkZhdGhlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdEaXZDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIG5ld0RpdkNoaWxkLnRleHRDb250ZW50ID0gKHZhclRvZG9bal0ucHJpbnRJdCgpKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RCb2FyZC5hcHBlbmRDaGlsZChuZXdEaXZGYXRoZXIpO1xuICAgICAgICAgICAgICAgIG5ld0RpdkZhdGhlci5hcHBlbmRDaGlsZChuZXdEaXZDaGlsZClcbiAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRlbGV0ZVRvZG9CdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICBkZWxldGVUb2RvQnV0dG9uLnNldEF0dHJpYnV0ZSgndHlwZScsJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZVRvZG9CdXR0b24udGV4dENvbnRlbnQgPSAnRGVsZXRlIFRoaXMgVG9kbyc7XG4gICAgICAgICAgICAgICAgZGVsZXRlVG9kb0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywnZGVsQnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgbmV3RGl2RmF0aGVyLmFwcGVuZENoaWxkKGRlbGV0ZVRvZG9CdXR0b24pO1xuXG4gICAgICAgICAgICAgICAgbWFrZURpdkV4cGFuZCh2YXJUb2RvW2pdKTtcbiAgICAgICAgICAgICAgICAvKiBkZWxldGVUb2RvQnV0dG9uTG9naWModmFyVG9kbyxqLHdob0lzQ2xpY2tlZCxsaXN0UHJvamVjdHMpOyAqL1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGRlbGV0ZUVsZW1lbnRzRG9tKCl7XG4gICAgY29uc3Qgc2VsZWN0RGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRvZG8tYm9hcmQgKicpO1xuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHNlbGVjdERpdi5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHNlbGVjdERpdltpXS50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgICBzZWxlY3REaXZbaV0ucmVtb3ZlKCk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIHByb2plY3REb21EZWxldGUod2hvSXNDbGlja2VkKXtcbiAgICBjb25zdCBidXR0b25TZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdHMgYnV0dG9uJyk7XG5cbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgYnV0dG9uU2VsZWN0Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYoYnV0dG9uU2VsZWN0W2ldLnRleHRDb250ZW50ID09PSB3aG9Jc0NsaWNrZWQpe1xuICAgICAgICAgICAgYnV0dG9uU2VsZWN0W2ldLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBuZXdUb2RvRGl2RG9tQ3JlYXRpb24oKXtcbiAgICBjb25zdCBkYXNoYm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGFzaGJvYXJkJyk7XG4gICAgY29uc3QgbmV3RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbmV3RGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCdkaXYtbmV3LWlucHV0cycpO1xuXG4gICAgbGV0IGlucHV0TmFtZXMgPSBbJ25hbWUnLCdkZXNjcmlwdGlvbicsJ2R1ZSBkYXRlJywncHJpb3JpdHknXTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgNDsgaSsrKXtcbiAgICAgICAgY29uc3QgbmV3SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBjb25zdCBuZXdMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG5cbiAgICAgICAgbmV3SW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywndGV4dCcpO1xuICAgICAgICBuZXdJbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJyxgJHtpbnB1dE5hbWVzW2ldfWApO1xuXG4gICAgICAgIG5ld0xhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJyxgJHtpbnB1dE5hbWVzW2ldfWApO1xuICAgICAgICBuZXdMYWJlbC50ZXh0Q29udGVudCA9IGlucHV0TmFtZXNbaV07XG4gICAgICAgIG5ld0Rpdi5hcHBlbmRDaGlsZChuZXdMYWJlbCk7XG4gICAgICAgIG5ld0Rpdi5hcHBlbmRDaGlsZChuZXdJbnB1dCk7XG5cbiAgICAgICAgXG4gICAgICAgIGxldCBhdHRyaWJ1dGVWYWx1ZSA9IG5ld0lucHV0LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgaWYoYXR0cmlidXRlVmFsdWUgPT09IGlucHV0TmFtZXNbMV0pe1xuICAgICAgICAgICAgbmV3SW5wdXQuc3R5bGUud2lkdGggPSAnMTUwcHgnO1xuICAgICAgICAgICAgbmV3SW5wdXQuc3R5bGUuaGVpZ2h0ID0gJzE1MHB4JztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRhc2hib2FyZC5hcHBlbmRDaGlsZChuZXdEaXYpO1xufVxuXG5mdW5jdGlvbiByZXR1cm5JbmZvRnJvbURPTSgpe1xuICAgIGNvbnN0IGlucHV0QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kaXYtbmV3LWlucHV0cyBpbnB1dCcpO1xuICAgIGxldCBpbmZvID0gWzAsMCwwLDBdO1xuICAgIFxuICAgICAgICAgICAgaW5mb1swXSA9IGlucHV0QnV0dG9uc1swXS52YWx1ZTtcbiAgICAgICAgICAgIGluZm9bMV0gPSBpbnB1dEJ1dHRvbnNbMV0udmFsdWU7XG4gICAgICAgICAgICBpbmZvWzJdID0gaW5wdXRCdXR0b25zWzJdLnZhbHVlO1xuICAgICAgICAgICAgaW5mb1szXSA9IGlucHV0QnV0dG9uc1szXS52YWx1ZTtcblxuICAgIHJldHVybiBpbmZvO1xuICAgIFxufVxuXG5mdW5jdGlvbiBtYWtlRGl2RXhwYW5kKHRvZG9FbGVtZW50KXtcbiAgICBjb25zdCBkaXZUb0V4cGFuZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWJvYXJkIGRpdjpsYXN0LW9mLXR5cGUgPiBkaXY6bGFzdC1vZi10eXBlJyk7XG4gICAgY29uc3QgZGVsZXRlQnV0dG9uRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZG8tYm9hcmQgZGl2Omxhc3Qtb2YtdHlwZSBidXR0b24nKTtcblxuICAgIGNvbnN0IGRpdnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kby1ib2FyZCBkaXY6bGFzdC1vZi10eXBlJyk7XG4gICAgZGl2cy5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgIFxuICAgIGRlbGV0ZUJ1dHRvbkRpdi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgXG4gICAgZGl2VG9FeHBhbmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSk9PntcbiAgICAgICAgXG4gICAgICAgIGlmKGRpdlRvRXhwYW5kLnRleHRDb250ZW50ID09PSB0b2RvRWxlbWVudC5wcmludEl0KCkpe1xuICAgICAgICAgICAgZGl2VG9FeHBhbmQudGV4dENvbnRlbnQgPSB0b2RvRWxlbWVudC5wcmludEl0RXhwYW5kZWQoKTtcbiAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbkRpdi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGRpdlRvRXhwYW5kLnRleHRDb250ZW50ID0gdG9kb0VsZW1lbnQucHJpbnRJdCgpO1xuICAgICAgICAgICAgZGVsZXRlQnV0dG9uRGl2LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxufVxuXG5mdW5jdGlvbiBkZWxldGVUb2RvQnV0dG9uTG9naWModmFyVG9kbyxqLHdob0lzQ2xpY2tlZCxsaXN0UHJvamVjdHMpe1xuICAgIGNvbnN0IHNlbGVjdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWJvYXJkIGRpdjpsYXN0LW9mLXR5cGUgYnV0dG9uJyk7XG5cblxuICAgIHNlbGVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+e1xuICAgICAgICB2YXJUb2RvLnNsaWNlKGosMSk7XG4gICAgICAgIGRlbGV0ZUVsZW1lbnRzRG9tKCk7XG4gICAgICAgIHByaW50VG9kb0VsZW1lbnRzKHdob0lzQ2xpY2tlZCxsaXN0UHJvamVjdHMpO1xuICAgIH0pO1xufSJdLCJuYW1lcyI6WyJUb2RvIiwidG9kb05hbWUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsInRoaXMiLCJwcmludEl0IiwicHJpbnRJdEV4cGFuZGVkIiwiZ2V0TmFtZU9mVG9kbyIsImRlbGV0ZUVsZW1lbnRzRG9tIiwic2VsZWN0RGl2IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImxlbmd0aCIsInRleHRDb250ZW50IiwicmVtb3ZlIiwicmV0dXJuSW5mb0Zyb21ET00iLCJpbnB1dEJ1dHRvbnMiLCJpbmZvIiwidmFsdWUiLCJtYWtlRGl2RXhwYW5kIiwidG9kb0VsZW1lbnQiLCJkaXZUb0V4cGFuZCIsInF1ZXJ5U2VsZWN0b3IiLCJkZWxldGVCdXR0b25EaXYiLCJzdHlsZSIsImRpc3BsYXkiLCJ2aXNpYmlsaXR5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJsaXN0UHJvamVjdHMiLCJ3aG9Jc0NsaWNrZWQiLCJpbnB1dFNlbGVjdG9yIiwibmV3UHJvamVjdCIsImRlbFByb2plY3QiLCJhZGRUb2RvIiwiaW5wdXQiLCJuYW1lIiwidG9kbyIsInB1c2hPYmoiLCJuZXdUb2RvIiwiZ2V0VG9kbyIsImdldE5hbWUiLCJQcm9qZWN0IiwicHVzaCIsInByb2plY3RTZWxlY3RvciIsIm5ld0IiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJwb3B1bGF0ZVdpdGhQcm9qZWN0QnV0dG9uIiwicHJvamVjdHNCdXR0b25zIiwic2VsZWN0Qm9hcmQiLCJ2YXJUb2RvIiwiaiIsIm5ld0RpdkZhdGhlciIsIm5ld0RpdkNoaWxkIiwiZGVsZXRlVG9kb0J1dHRvbiIsInByaW50VG9kb0VsZW1lbnRzIiwic2xpY2UiLCJidXR0b25TZWxlY3QiLCJwcm9qZWN0RG9tRGVsZXRlIiwiZGFzaGJvYXJkIiwibmV3RGl2IiwiaW5wdXROYW1lcyIsIm5ld0lucHV0IiwibmV3TGFiZWwiLCJnZXRBdHRyaWJ1dGUiLCJ3aWR0aCIsImhlaWdodCIsIm5ld1RvZG9EaXZEb21DcmVhdGlvbiIsImFycmF5T2ZEYXRhIiwicHJvamVjdE5hbWUiXSwic291cmNlUm9vdCI6IiJ9