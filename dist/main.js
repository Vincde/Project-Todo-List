(()=>{function t(t,e,o,n){return this.todoName=t,this.description=e,this.dueDate=o,this.priority=n,{printIt:()=>`name:  ${t} priority: ${n}`,printItExpanded:()=>`name: ${t} description: ${e} duedate: ${o}priority: ${n}`,getNameOfTodo:()=>t,getDescr:()=>e,getPriority:()=>n,getDueDate:()=>o,setName:e=>{t=e},setDescr:t=>{e=t},setDueDate:t=>{o=t},setPriority:t=>{n=t}}}function e(){const t=document.querySelectorAll(".todo-board *");for(let e=0;e<t.length;e++)t[e].textContent="",t[e].remove()}function o(){const t=document.querySelectorAll(".div-new-inputs input");let e=[0,0,0,0];return e[0]=t[0].value,e[1]=t[1].value,e[2]=t[2].value,e[3]=t[3].value,e}function n(t){const e=document.querySelector(".todo-board div:last-of-type > div:last-of-type"),o=document.querySelector(".todo-board div:last-of-type button"),n=document.querySelector(".todo-board div:last-of-type button:last-of-type");document.querySelector(".todo-board > div:last-of-type").style.display="flex",o.style.visibility="hidden",n.style.visibility="hidden",e.addEventListener("click",(i=>{e.textContent===t.printIt()?(e.textContent=t.printItExpanded(),o.style.visibility="visible",n.style.visibility="visible"):(e.textContent=t.printIt(),o.style.visibility="hidden",n.style.visibility="hidden")}))}function i(t,o){document.querySelector(".todo-board > div:last-of-type > button").addEventListener("click",(n=>{t.splice(o,1),e(),n.stopPropagation()}))}function d(t,e){const o=document.querySelector(".todo-board > div:last-of-type > button:last-of-type"),n=document.querySelectorAll(".div-new-inputs input");o.addEventListener("click",(()=>{"Edit this Todo"===o.textContent?(o.textContent="Apply Changes",n[0].value=t[e].getNameOfTodo(),n[1].value=t[e].getDescr(),n[2].value=t[e].getDueDate(),n[3].value=t[e].getPriority()):"Apply Changes"===o.textContent&&(t[e].setName(n[0].value),t[e].setDescr(n[1].value),t[e].setDueDate(n[2].value),t[e].setPriority(n[3].value),o.textContent="Edit this Todo")}))}!function(){const l=[];let r;const u=document.querySelector(".dashboard input"),s=document.querySelector(".dashboard button:first-of-type"),c=document.querySelector(".delete"),a=document.querySelector(".add-todo");s.addEventListener("click",(()=>{let t=u.value;const o=function(t){this.name=t;let e=[];return this.pushObj=t=>{e[e.length]=t},this.getTodo=()=>e,{getName:()=>t,pushObj,getTodo,todo:e}}(t);l.push(o),function(t){const e=document.querySelector(".projects"),o=document.createElement("button");o.setAttribute("type","button"),o.textContent=t,e.appendChild(o)}(t);let s=document.querySelector(".projects button:last-of-type");s.addEventListener("click",(t=>{r=s.textContent,e(),function(t,e){const o=document.querySelector(".todo-board");for(let l=0;l<e.length;l++)if(t===e[l].getName()){let t=e[l].getTodo();for(let e=0;e<t.length;e++){let l=document.createElement("div"),r=document.createElement("div");r.textContent=t[e].printIt(),o.appendChild(l),l.appendChild(r);const u=document.createElement("button");u.setAttribute("type","button"),u.textContent="Delete This Todo",u.setAttribute("class","delButton"),l.appendChild(u);const s=document.createElement("button");s.setAttribute("type","button"),s.textContent="Edit this Todo",l.appendChild(s),n(t[e]),i(t,e),d(t,e)}}}(r,l)}))})),c.addEventListener("click",(()=>{e();for(let t=0;t<l.length;t++)l[t].getName()===r&&l.slice(t,1);!function(t){const e=document.querySelectorAll(".projects button");for(let o=0;o<e.length;o++)e[o].textContent===t&&e[o].remove()}(r)})),function(){const t=document.querySelector(".dashboard"),e=document.createElement("div");e.setAttribute("class","div-new-inputs");let o=["name","description","due date","priority"];for(let t=0;t<4;t++){const n=document.createElement("input"),i=document.createElement("label");n.setAttribute("type","text"),n.setAttribute("id",`${o[t]}`),i.setAttribute("for",`${o[t]}`),i.textContent=o[t],e.appendChild(i),e.appendChild(n),n.getAttribute("id")===o[1]&&(n.style.width="150px",n.style.height="150px")}t.appendChild(e)}(),a.addEventListener("click",(()=>{let e,n;for(let i=0;i<l.length;i++)if(n=l[i].getName(),n===r){e=o();const n=t(e[0],e[1],e[2],e[3]);l[i].pushObj(n)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQyxPQUFPLGNBQWMsV0FBVyxZQUNsRCxJQUFJLElBQUkzRCxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFBSSxDQUN0QixNQUFNNEQsRUFBVzlELFNBQVM4QyxjQUFjLFNBQ2xDaUIsRUFBVy9ELFNBQVM4QyxjQUFjLFNBRXhDZ0IsRUFBU2YsYUFBYSxPQUFPLFFBQzdCZSxFQUFTZixhQUFhLEtBQUssR0FBR2MsRUFBVzNELE1BRXpDNkQsRUFBU2hCLGFBQWEsTUFBTSxHQUFHYyxFQUFXM0QsTUFDMUM2RCxFQUFTM0QsWUFBY3lELEVBQVczRCxHQUNsQzBELEVBQU9aLFlBQVllLEdBQ25CSCxFQUFPWixZQUFZYyxHQUdFQSxFQUFTRSxhQUFhLFFBQ3JCSCxFQUFXLEtBQzdCQyxFQUFTOUMsTUFBTWlELE1BQVEsUUFDdkJILEVBQVM5QyxNQUFNa0QsT0FBUyxRQUVoQyxDQUVBUCxFQUFVWCxZQUFZWSxFQUMxQixDQWpMSU8sR0FFQWpDLEVBQVFmLGlCQUFpQixTQUFRLEtBQzdCLElBQUlpRCxFQUNBQyxFQUdKLElBQUksSUFBSTlDLEVBQUksRUFBR0EsRUFBSU0sRUFBYTFCLE9BQVFvQixJQUdwQyxHQUZBOEMsRUFBY3hDLEVBQWFOLEdBQUdrQixVQUUzQjRCLElBQWdCdkMsRUFBYSxDQUM1QnNDLEVBQWM5RCxJQUNkLE1BQU1pQyxFQUFVN0QsRUFBSzBGLEVBQVksR0FBR0EsRUFBWSxHQUFHQSxFQUFZLEdBQUdBLEVBQVksSUFDOUV2QyxFQUFhTixHQUFHZSxRQUFRQyxFQUM1QixDQUNKLEdBS1AsQ0E1REQsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3QtdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGZ1bmN0aW9uIGxvZ2ljKCkge1xuICAgIHRoaXMgd2lsbCBiZSB0aGUgZXhwbGFuYXRpb24gb2YgdGhpcyB3ZWJwYWdlXG4gICAgXG4gICAgMSkgd2VicGFnZSBzdGFydHNcbiAgICAxKil3ZWJwYWdlIGhhcyBhbm90aGVyIGJ1dHRvbiBmb3IgZGVsZXRpbmcgcHJvamVjdChhbmQgaWlmZSBnZXRzIHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudCBjbGlja2VkIGJ1dHRvbilcbiAgICB3aGVuIGRlbGV0aW5nIGJ1dHRvbiBpcyBwcmVzc2VkIGEgZnVuY3Rpb24gc2VhcmNoZXMgZm9yIHRoZSBlbGVtZW50IGFuZCBkZWxldGVzIHRoZSBlbnRpcmUgcHJvamVjdCBhbmQgcmVzZXRzIGFsbCBlbGVtZW50cyBhdCBzY3JlZW4gKGFuZCB0aGUgYnV0dG9uIGluIGRvbSBvYnZpb3VzbHkpXG4gICAgMilvbmx5IHByZXNlbnQgYnV0dG9uIGlzIGlucHV0IGFuZCBuZXdQcm9qZWN0IGJ1dHRvblxuICAgIDMpaWYgaW5wdXQgaXMgZmlsbGVkIHRoZSBidXR0b24gd29ya3MgYW5kIHN0YXJ0cyB0aGUgY3JlYXRpb24gb2YgdGhlIHByb2plY3RcbiAgICA0KXRoZSBidXR0b24gY3JlYXRlcyB0aGUgcHJvamVjdFxuICAgIDUpaXQgY3JlYXRlcyBhIG5ldyBidXR0b24gdGhhdCByZXNldHMgdGhlIHZpZXcgb2YgZWxlbWVudHMgaW4gdGhlIG1haW4gcGFydCBvZiB3ZWJwYWdlXG4gICAgNilvbmx5IHdoZW4gY2xpY2tlZCB0aGUgbmV3bHkgY3JlYXRlZCBidXR0b24gcHJpbnRzIGFsbCBkb20gZWxlbWVudHMgaW50byB0aGUgcGFnZVxuICAgIDcpd2hlbiBhbm90aGVyIGJ1dHRvbiBpcyBzZWxlY3RlZCB0aGUgZG9tIGVsZW1lbnRzIGdldHMgZGVsZXRlZCBhbmQgbmV3IG9uZXMgYXJlIHByaW50ZWRcbiAgICA4KWFub3RoZXIgaWlmZSBnZXRzIHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudGx5IGNsaWNrZWQgYnV0dG9uIGFuZCB1c2VzIGEgYnV0dG9uIHRoYXQgdGFrZXMgYSBuZXcgdG9kbyBhbmQgcHVzaCBpdCBpbnRvIHRoZSBhcnJheSBvZiB0b2Rvcy4gVGhlIHByaW50IGZ1bmN0aW9uIHdpbGwgcHJpbnQgZXZlcnl0aGluZyB3aXRob3V0IHlvdSB0aGlua2luZyBhYm91dCBpdFxuICAgXG59ICovXG5cbihmdW5jdGlvbiB3ZWJQYWdlU3RhcnRzKCl7XG4gICAgY29uc3QgbGlzdFByb2plY3RzID0gW107XG4gICAgbGV0IHdob0lzQ2xpY2tlZDtcblxuICAgIGNvbnN0IGlucHV0U2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGFzaGJvYXJkIGlucHV0Jyk7XG4gICAgY29uc3QgbmV3UHJvamVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXNoYm9hcmQgYnV0dG9uOmZpcnN0LW9mLXR5cGUnKTtcbiAgICBjb25zdCBkZWxQcm9qZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlbGV0ZScpO1xuICAgIGNvbnN0IGFkZFRvZG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRvZG8nKTtcblxuICAgIG5ld1Byb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIFxuICAgICAgICBsZXQgaW5wdXQgPSBpbnB1dFNlbGVjdG9yLnZhbHVlO1xuXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBQcm9qZWN0KGlucHV0KTtcbiAgICAgICAgbGlzdFByb2plY3RzLnB1c2gobmV3UHJvamVjdCk7XG4gICAgICAgIFxuICAgICAgICBwb3B1bGF0ZVdpdGhQcm9qZWN0QnV0dG9uKGlucHV0KTtcblxuICAgICAgICBsZXQgcHJvamVjdHNCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RzIGJ1dHRvbjpsYXN0LW9mLXR5cGUnKTtcblxuICAgICAgICBcbiAgICAgICAgcHJvamVjdHNCdXR0b25zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpPT57XG4gICAgICAgICAgICB3aG9Jc0NsaWNrZWQgPSBwcm9qZWN0c0J1dHRvbnMudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICBkZWxldGVFbGVtZW50c0RvbSgpO1xuICAgICAgICAgICAgcHJpbnRUb2RvRWxlbWVudHMod2hvSXNDbGlja2VkLGxpc3RQcm9qZWN0cyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9KTtcblxuICAgIFxuICAgIGRlbFByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PntcbiAgICAgICAgZGVsZXRlRWxlbWVudHNEb20oKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxpc3RQcm9qZWN0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBpZihsaXN0UHJvamVjdHNbaV0uZ2V0TmFtZSgpID09PSB3aG9Jc0NsaWNrZWQpe1xuICAgICAgICAgICAgICAgIGxpc3RQcm9qZWN0cy5zbGljZShpLDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb2plY3REb21EZWxldGUod2hvSXNDbGlja2VkKTtcbiAgICB9KTtcblxuICAgIG5ld1RvZG9EaXZEb21DcmVhdGlvbigpO1xuXG4gICAgYWRkVG9kby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCkgPT57XG4gICAgICAgIGxldCBhcnJheU9mRGF0YTtcbiAgICAgICAgbGV0IHByb2plY3ROYW1lO1xuICAgICAgICBcblxuICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgbGlzdFByb2plY3RzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgIHByb2plY3ROYW1lID0gbGlzdFByb2plY3RzW2pdLmdldE5hbWUoKTtcblxuICAgICAgICAgICAgaWYocHJvamVjdE5hbWUgPT09IHdob0lzQ2xpY2tlZCl7XG4gICAgICAgICAgICAgICAgYXJyYXlPZkRhdGEgPSByZXR1cm5JbmZvRnJvbURPTSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RvZG8gPSBUb2RvKGFycmF5T2ZEYXRhWzBdLGFycmF5T2ZEYXRhWzFdLGFycmF5T2ZEYXRhWzJdLGFycmF5T2ZEYXRhWzNdKTtcbiAgICAgICAgICAgICAgICBsaXN0UHJvamVjdHNbal0ucHVzaE9iaihuZXdUb2RvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICAvL1RoaXMgZnVuY3Rpb24gZ2V0cyBleGVjdXRlZCBvbmx5IGF0IHJ1bnRpbWUsIHNvIGkgY2Fubm90IHB1dCB0aGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBidXR0b24gcHJlc3NlZC5cbn0pKCk7XG5cblxuZnVuY3Rpb24gUHJvamVjdChuYW1lKXtcbiAgICB0aGlzLm5hbWUgPSBuYW1lOyAgLy9JdCBpcyBwcm9iYWJsZSB0aGF0IHNvbWUgcHJvYmxlbXMgbWlnaHQgYmUgY2F1c2VkIGJ5IHRoZSB0aGlzLm5hbWUgLi4uIElmIHRydWUganVzdCBkZWxldGUgdGhlIHRoaXNcbiAgICBsZXQgdG9kbyA9IFtdO1xuICAgIFxuICAgIGNvbnN0IGdldE5hbWUgPSAoKSA9PntcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoT2JqID0gKG5ld1RvZG8pID0+e1xuICAgICAgICB0b2RvW3RvZG8ubGVuZ3RoXSA9IG5ld1RvZG87XG4gICAgfVxuXG4gICAgdGhpcy5nZXRUb2RvID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdG9kbztcbiAgICB9XG5cbiAgICByZXR1cm4ge2dldE5hbWUscHVzaE9iaixnZXRUb2RvLHRvZG99O1xufVxuXG5mdW5jdGlvbiBUb2RvKHRvZG9OYW1lLGRlc2NyaXB0aW9uLGR1ZURhdGUscHJpb3JpdHkpe1xuICAgIHRoaXMudG9kb05hbWUgPSB0b2RvTmFtZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG5cbiAgICBjb25zdCBwcmludEl0ID0gKCkgPT57ICAvL2hhZCB0byBjaGFuZ2UgbmFtZSBvZiB0b2RvXG4gICAgICAgIHJldHVybiBgbmFtZTogICR7dG9kb05hbWV9IHByaW9yaXR5OiAke3ByaW9yaXR5fWA7XG4gICAgfVxuXG4gICAgY29uc3QgcHJpbnRJdEV4cGFuZGVkID0gKCkgPT57XG4gICAgICAgIHJldHVybiBgbmFtZTogJHt0b2RvTmFtZX0gZGVzY3JpcHRpb246ICR7ZGVzY3JpcHRpb259IGR1ZWRhdGU6ICR7ZHVlRGF0ZX1wcmlvcml0eTogJHtwcmlvcml0eX1gO1xuICAgIH1cblxuICAgIGNvbnN0IGdldE5hbWVPZlRvZG8gPSAoKSA9PntcbiAgICAgICAgcmV0dXJuIHRvZG9OYW1lO1xuICAgIH1cbiAgICBjb25zdCBnZXREZXNjciA9ICgpID0+e1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgfVxuICAgIGNvbnN0IGdldFByaW9yaXR5ID0gKCkgPT57XG4gICAgICAgIHJldHVybiBwcmlvcml0eTtcbiAgICB9XG4gICAgY29uc3QgZ2V0RHVlRGF0ZSA9ICgpID0+e1xuICAgICAgICByZXR1cm4gZHVlRGF0ZTtcbiAgICB9XG5cbiAgICBjb25zdCBzZXROYW1lID0gKG5ld05hbWUpID0+e1xuICAgICAgICB0b2RvTmFtZSA9IG5ld05hbWU7XG4gICAgfVxuICAgIGNvbnN0IHNldERlc2NyID0gKG5ld0Rlc2NyKSA9PntcbiAgICAgICAgZGVzY3JpcHRpb24gPSBuZXdEZXNjcjtcbiAgICB9XG4gICAgY29uc3Qgc2V0RHVlRGF0ZSA9IChuZXdEdWVEYXRlKSA9PntcbiAgICAgICAgZHVlRGF0ZSA9IG5ld0R1ZURhdGU7XG4gICAgfVxuICAgIGNvbnN0IHNldFByaW9yaXR5ID0gKG5ld1ByaW9yaXR5KSA9PntcbiAgICAgICAgcHJpb3JpdHkgPSBuZXdQcmlvcml0eTtcbiAgICB9XG5cblxuICAgIHJldHVybntwcmludEl0LHByaW50SXRFeHBhbmRlZCxnZXROYW1lT2ZUb2RvLGdldERlc2NyLGdldFByaW9yaXR5LGdldER1ZURhdGUsc2V0TmFtZSxzZXREZXNjcixzZXREdWVEYXRlLHNldFByaW9yaXR5fTtcbn1cblxuXG5mdW5jdGlvbiBwb3B1bGF0ZVdpdGhQcm9qZWN0QnV0dG9uKGlucHV0KXtcbiAgICBjb25zdCBwcm9qZWN0U2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdHMnKTtcblxuICAgIGNvbnN0IG5ld0IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBuZXdCLnNldEF0dHJpYnV0ZSgndHlwZScsJ2J1dHRvbicpO1xuICAgIG5ld0IudGV4dENvbnRlbnQgPSBpbnB1dDtcblxuICAgIHByb2plY3RTZWxlY3Rvci5hcHBlbmRDaGlsZChuZXdCKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRUb2RvRWxlbWVudHMod2hvSXNDbGlja2VkLGxpc3RQcm9qZWN0cyl7XG4gICAgY29uc3Qgc2VsZWN0Qm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kby1ib2FyZCcpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsaXN0UHJvamVjdHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZih3aG9Jc0NsaWNrZWQgPT09IGxpc3RQcm9qZWN0c1tpXS5nZXROYW1lKCkpe1xuICAgICAgICAgICAgbGV0IHZhclRvZG8gPSBsaXN0UHJvamVjdHNbaV0uZ2V0VG9kbygpO1xuICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHZhclRvZG8ubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgIGxldCBuZXdEaXZGYXRoZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3RGl2Q2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBuZXdEaXZDaGlsZC50ZXh0Q29udGVudCA9ICh2YXJUb2RvW2pdLnByaW50SXQoKSk7XG4gICAgICAgICAgICAgICAgc2VsZWN0Qm9hcmQuYXBwZW5kQ2hpbGQobmV3RGl2RmF0aGVyKTtcbiAgICAgICAgICAgICAgICBuZXdEaXZGYXRoZXIuYXBwZW5kQ2hpbGQobmV3RGl2Q2hpbGQpXG4gICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICBjb25zdCBkZWxldGVUb2RvQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgZGVsZXRlVG9kb0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICBkZWxldGVUb2RvQnV0dG9uLnRleHRDb250ZW50ID0gJ0RlbGV0ZSBUaGlzIFRvZG8nO1xuICAgICAgICAgICAgICAgIGRlbGV0ZVRvZG9CdXR0b24uc2V0QXR0cmlidXRlKCdjbGFzcycsJ2RlbEJ1dHRvbicpO1xuICAgICAgICAgICAgICAgIG5ld0RpdkZhdGhlci5hcHBlbmRDaGlsZChkZWxldGVUb2RvQnV0dG9uKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICBlZGl0QnV0dG9uLnNldEF0dHJpYnV0ZSgndHlwZScsJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgIGVkaXRCdXR0b24udGV4dENvbnRlbnQgPSAnRWRpdCB0aGlzIFRvZG8nO1xuICAgICAgICAgICAgICAgIG5ld0RpdkZhdGhlci5hcHBlbmRDaGlsZChlZGl0QnV0dG9uKTtcblxuICAgICAgICAgICAgICAgIG1ha2VEaXZFeHBhbmQodmFyVG9kb1tqXSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlVG9kb0J1dHRvbkxvZ2ljKHZhclRvZG8saik7XG4gICAgICAgICAgICAgICAgZWRpdEJ0dG4odmFyVG9kbyxqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBkZWxldGVFbGVtZW50c0RvbSgpe1xuICAgIGNvbnN0IHNlbGVjdERpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b2RvLWJvYXJkIConKTtcblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWxlY3REaXYubGVuZ3RoOyBpKyspe1xuICAgICAgICBzZWxlY3REaXZbaV0udGV4dENvbnRlbnQgPSAnJztcbiAgICAgICAgc2VsZWN0RGl2W2ldLnJlbW92ZSgpO1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBwcm9qZWN0RG9tRGVsZXRlKHdob0lzQ2xpY2tlZCl7XG4gICAgY29uc3QgYnV0dG9uU2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3RzIGJ1dHRvbicpO1xuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGJ1dHRvblNlbGVjdC5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmKGJ1dHRvblNlbGVjdFtpXS50ZXh0Q29udGVudCA9PT0gd2hvSXNDbGlja2VkKXtcbiAgICAgICAgICAgIGJ1dHRvblNlbGVjdFtpXS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbmV3VG9kb0RpdkRvbUNyZWF0aW9uKCl7XG4gICAgY29uc3QgZGFzaGJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhc2hib2FyZCcpO1xuICAgIGNvbnN0IG5ld0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG5ld0Rpdi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywnZGl2LW5ldy1pbnB1dHMnKTtcblxuICAgIGxldCBpbnB1dE5hbWVzID0gWyduYW1lJywnZGVzY3JpcHRpb24nLCdkdWUgZGF0ZScsJ3ByaW9yaXR5J107XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IDQ7IGkrKyl7XG4gICAgICAgIGNvbnN0IG5ld0lucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgY29uc3QgbmV3TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuXG4gICAgICAgIG5ld0lucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsJ3RleHQnKTtcbiAgICAgICAgbmV3SW5wdXQuc2V0QXR0cmlidXRlKCdpZCcsYCR7aW5wdXROYW1lc1tpXX1gKTtcblxuICAgICAgICBuZXdMYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsYCR7aW5wdXROYW1lc1tpXX1gKTtcbiAgICAgICAgbmV3TGFiZWwudGV4dENvbnRlbnQgPSBpbnB1dE5hbWVzW2ldO1xuICAgICAgICBuZXdEaXYuYXBwZW5kQ2hpbGQobmV3TGFiZWwpO1xuICAgICAgICBuZXdEaXYuYXBwZW5kQ2hpbGQobmV3SW5wdXQpO1xuXG4gICAgICAgIFxuICAgICAgICBsZXQgYXR0cmlidXRlVmFsdWUgPSBuZXdJbnB1dC5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICAgIGlmKGF0dHJpYnV0ZVZhbHVlID09PSBpbnB1dE5hbWVzWzFdKXtcbiAgICAgICAgICAgIG5ld0lucHV0LnN0eWxlLndpZHRoID0gJzE1MHB4JztcbiAgICAgICAgICAgIG5ld0lucHV0LnN0eWxlLmhlaWdodCA9ICcxNTBweCc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkYXNoYm9hcmQuYXBwZW5kQ2hpbGQobmV3RGl2KTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuSW5mb0Zyb21ET00oKXtcbiAgICBjb25zdCBpbnB1dEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZGl2LW5ldy1pbnB1dHMgaW5wdXQnKTtcbiAgICBsZXQgaW5mbyA9IFswLDAsMCwwXTtcbiAgICBcbiAgICAgICAgICAgIGluZm9bMF0gPSBpbnB1dEJ1dHRvbnNbMF0udmFsdWU7XG4gICAgICAgICAgICBpbmZvWzFdID0gaW5wdXRCdXR0b25zWzFdLnZhbHVlO1xuICAgICAgICAgICAgaW5mb1syXSA9IGlucHV0QnV0dG9uc1syXS52YWx1ZTtcbiAgICAgICAgICAgIGluZm9bM10gPSBpbnB1dEJ1dHRvbnNbM10udmFsdWU7XG5cbiAgICByZXR1cm4gaW5mbztcbiAgICBcbn1cblxuZnVuY3Rpb24gbWFrZURpdkV4cGFuZCh0b2RvRWxlbWVudCl7XG4gICAgY29uc3QgZGl2VG9FeHBhbmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kby1ib2FyZCBkaXY6bGFzdC1vZi10eXBlID4gZGl2Omxhc3Qtb2YtdHlwZScpO1xuICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbkRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWJvYXJkIGRpdjpsYXN0LW9mLXR5cGUgYnV0dG9uJyk7XG4gICAgY29uc3QgZWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWJvYXJkIGRpdjpsYXN0LW9mLXR5cGUgYnV0dG9uOmxhc3Qtb2YtdHlwZScpO1xuXG4gICAgbGV0IGRpdnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kby1ib2FyZCA+IGRpdjpsYXN0LW9mLXR5cGUnKTtcbiAgICBkaXZzLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgXG4gICAgZGVsZXRlQnV0dG9uRGl2LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICBlZGl0QnV0dG9uLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICBcbiAgICBkaXZUb0V4cGFuZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKT0+e1xuICAgICAgICBcbiAgICAgICAgaWYoZGl2VG9FeHBhbmQudGV4dENvbnRlbnQgPT09IHRvZG9FbGVtZW50LnByaW50SXQoKSl7XG4gICAgICAgICAgICBkaXZUb0V4cGFuZC50ZXh0Q29udGVudCA9IHRvZG9FbGVtZW50LnByaW50SXRFeHBhbmRlZCgpO1xuICAgICAgICAgICAgZGVsZXRlQnV0dG9uRGl2LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgICAgICBlZGl0QnV0dG9uLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgZGl2VG9FeHBhbmQudGV4dENvbnRlbnQgPSB0b2RvRWxlbWVudC5wcmludEl0KCk7XG4gICAgICAgICAgICBkZWxldGVCdXR0b25EaXYuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgZWRpdEJ1dHRvbi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgIH1cblxuICAgIH0pO1xuICAgIFxufVxuXG5mdW5jdGlvbiBkZWxldGVUb2RvQnV0dG9uTG9naWModmFyVG9kbyxqKXtcbiAgICBjb25zdCBzZWxlY3RCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kby1ib2FyZCA+IGRpdjpsYXN0LW9mLXR5cGUgPiBidXR0b24nKTtcblxuXG4gICAgc2VsZWN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PntcbiAgICAgICAgdmFyVG9kby5zcGxpY2UoaiwxKTtcbiAgICAgICAgZGVsZXRlRWxlbWVudHNEb20oKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7ICAvL2V2ZW50IE5FRURTIHRvIGJlIGF0IHRoZSBlbmQgb3IganVzdCBkZWFjdGl2YXRlcyBhbGxcbiAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiBlZGl0QnR0bih2YXJUb2RvLGope1xuICAgIGNvbnN0IGVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kby1ib2FyZCA+IGRpdjpsYXN0LW9mLXR5cGUgPiBidXR0b246bGFzdC1vZi10eXBlJyk7XG4gICAgY29uc3QgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRpdi1uZXctaW5wdXRzIGlucHV0Jyk7XG5cbiAgICBlZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgXG4gICAgICAgIGlmKGVkaXRCdXR0b24udGV4dENvbnRlbnQgPT09ICdFZGl0IHRoaXMgVG9kbycpe1xuICAgICAgICBlZGl0QnV0dG9uLnRleHRDb250ZW50ID0gJ0FwcGx5IENoYW5nZXMnO1xuICAgICAgICBpbnB1dHNbMF0udmFsdWUgPSB2YXJUb2RvW2pdLmdldE5hbWVPZlRvZG8oKTtcbiAgICAgICAgaW5wdXRzWzFdLnZhbHVlID0gdmFyVG9kb1tqXS5nZXREZXNjcigpO1xuICAgICAgICBpbnB1dHNbMl0udmFsdWUgPSB2YXJUb2RvW2pdLmdldER1ZURhdGUoKTtcbiAgICAgICAgaW5wdXRzWzNdLnZhbHVlID0gdmFyVG9kb1tqXS5nZXRQcmlvcml0eSgpO1xuICAgICAgICB9ZWxzZSBpZihlZGl0QnV0dG9uLnRleHRDb250ZW50ID09PSAnQXBwbHkgQ2hhbmdlcycpe1xuICAgICAgICAgICAgdmFyVG9kb1tqXS5zZXROYW1lKGlucHV0c1swXS52YWx1ZSk7XG4gICAgICAgICAgICB2YXJUb2RvW2pdLnNldERlc2NyKGlucHV0c1sxXS52YWx1ZSk7XG4gICAgICAgICAgICB2YXJUb2RvW2pdLnNldER1ZURhdGUoaW5wdXRzWzJdLnZhbHVlKTtcbiAgICAgICAgICAgIHZhclRvZG9bal0uc2V0UHJpb3JpdHkoaW5wdXRzWzNdLnZhbHVlKTtcbiAgICAgICAgICAgIGVkaXRCdXR0b24udGV4dENvbnRlbnQgPSAnRWRpdCB0aGlzIFRvZG8nO1xuICAgICAgICB9XG5cbiAgICB9KTtcbn0iXSwibmFtZXMiOlsiVG9kbyIsInRvZG9OYW1lIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJ0aGlzIiwicHJpbnRJdCIsInByaW50SXRFeHBhbmRlZCIsImdldE5hbWVPZlRvZG8iLCJnZXREZXNjciIsImdldFByaW9yaXR5IiwiZ2V0RHVlRGF0ZSIsInNldE5hbWUiLCJuZXdOYW1lIiwic2V0RGVzY3IiLCJuZXdEZXNjciIsInNldER1ZURhdGUiLCJuZXdEdWVEYXRlIiwic2V0UHJpb3JpdHkiLCJuZXdQcmlvcml0eSIsImRlbGV0ZUVsZW1lbnRzRG9tIiwic2VsZWN0RGl2IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImxlbmd0aCIsInRleHRDb250ZW50IiwicmVtb3ZlIiwicmV0dXJuSW5mb0Zyb21ET00iLCJpbnB1dEJ1dHRvbnMiLCJpbmZvIiwidmFsdWUiLCJtYWtlRGl2RXhwYW5kIiwidG9kb0VsZW1lbnQiLCJkaXZUb0V4cGFuZCIsInF1ZXJ5U2VsZWN0b3IiLCJkZWxldGVCdXR0b25EaXYiLCJlZGl0QnV0dG9uIiwic3R5bGUiLCJkaXNwbGF5IiwidmlzaWJpbGl0eSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiZGVsZXRlVG9kb0J1dHRvbkxvZ2ljIiwidmFyVG9kbyIsImoiLCJldmVudCIsInNwbGljZSIsInN0b3BQcm9wYWdhdGlvbiIsImVkaXRCdHRuIiwiaW5wdXRzIiwibGlzdFByb2plY3RzIiwid2hvSXNDbGlja2VkIiwiaW5wdXRTZWxlY3RvciIsIm5ld1Byb2plY3QiLCJkZWxQcm9qZWN0IiwiYWRkVG9kbyIsImlucHV0IiwibmFtZSIsInRvZG8iLCJwdXNoT2JqIiwibmV3VG9kbyIsImdldFRvZG8iLCJnZXROYW1lIiwiUHJvamVjdCIsInB1c2giLCJwcm9qZWN0U2VsZWN0b3IiLCJuZXdCIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwicG9wdWxhdGVXaXRoUHJvamVjdEJ1dHRvbiIsInByb2plY3RzQnV0dG9ucyIsInNlbGVjdEJvYXJkIiwibmV3RGl2RmF0aGVyIiwibmV3RGl2Q2hpbGQiLCJkZWxldGVUb2RvQnV0dG9uIiwicHJpbnRUb2RvRWxlbWVudHMiLCJzbGljZSIsImJ1dHRvblNlbGVjdCIsInByb2plY3REb21EZWxldGUiLCJkYXNoYm9hcmQiLCJuZXdEaXYiLCJpbnB1dE5hbWVzIiwibmV3SW5wdXQiLCJuZXdMYWJlbCIsImdldEF0dHJpYnV0ZSIsIndpZHRoIiwiaGVpZ2h0IiwibmV3VG9kb0RpdkRvbUNyZWF0aW9uIiwiYXJyYXlPZkRhdGEiLCJwcm9qZWN0TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=